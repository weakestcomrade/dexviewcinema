// app/api/bookings/route.ts
import { NextApiRequest, NextApiResponse } from "next";
import { ObjectId } from "mongodb";
import { db } from "@/lib/db";
import { generateReceiptHtml, generateReceiptText } from "@/lib/receipts";
import { getNextSequence, formatBookingCode } from "@/lib/sequences";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "POST") {
    const { newBookingData, eventId } = req.body;

    // Generate booking code
    const seq = await getNextSequence(db, "booking");
    const bookingCode = formatBookingCode(seq); // e.g., DEX000123

    // Create bookingToInsert with bookingCode
    const bookingToInsert = {
      ...newBookingData,
      bookingCode, // human-friendly code
      eventId: new ObjectId(eventId),
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // Insert booking into the database
    const result = await db.collection("bookings").insertOne(bookingToInsert);

    // Build createdBooking with _id and eventId
    const createdBooking = {
      ...bookingToInsert,
      _id: result.insertedId.toString(),
      eventId: eventId,
    };

    // Generate receipt HTML and text
    const receiptHtml = generateReceiptHtml(createdBooking);
    const receiptText = generateReceiptText(createdBooking);

    // Send response with receipt
    res.status(201).json({ receiptHtml, receiptText });
  } else {
    res.status(405).json({ message: "Method not allowed" });
  }
}

function generateReceiptHtml(booking: any) {
  return `
    <html>
      <body>
        <table>
          <tr>
            <td width="40%" style="background:#F9FAFB; padding:12px; font-family:Arial, Helvetica, sans-serif; font-size:13px; color:#344054; font-weight:600;">Booking ID</td>
            <td style="padding:12px; font-family:Arial, Helvetica, sans-serif; font-size:13px; color:#475467;">${booking.bookingCode || booking._id}</td>
          </tr>
          <!-- Other rows here -->
        </table>
      </body>
    </html>
  `;
}

function generateReceiptText(booking: any) {
  return `
    - Booking ID: ${booking.bookingCode || booking._id}
    - Customer Name: ${booking.customerName}
    - Customer Email: ${booking.customerEmail}
    - Customer Phone: ${booking.customerPhone}
    - Event Title: ${booking.eventTitle}
    - Event Type: ${booking.eventType}
    - Event Date: ${booking.eventDate}
    - Event Time: ${booking.eventTime}
    - Seats: ${booking.seats.join(", ")}
    - Seat Type: ${booking.seatType}
    - Amount: ${booking.amount}
    - Processing Fee: ${booking.processingFee}
    - Total Amount: ${booking.totalAmount}
    - Status: ${booking.status}
    - Booking Date: ${booking.bookingDate}
    - Booking Time: ${booking.bookingTime}
    - Payment Method: ${booking.paymentMethod}
  `;
}

// app/api/payment/verify/route.ts
import { NextApiRequest, NextApiResponse } from "next";
import { ObjectId } from "mongodb";
import { db } from "@/lib/db";
import { generateReceiptHtml } from "@/lib/receipts";
import { getNextSequence, formatBookingCode } from "@/lib/sequences";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "POST") {
    const { customerName, customerEmail, customerPhone, eventIdStr, eventTitle, eventType, seats, seatType, baseAmount, paidAmountInNaira, reference, pstack } = req.body;

    // Generate booking code
    const seq = await getNextSequence(db, "booking");
    const bookingCode = formatBookingCode(seq);

    // Compose bookingData with bookingCode
    const bookingData: any = {
      customerName,
      customerEmail,
      customerPhone,
      eventId: event?._id || (ObjectId.isValid(eventIdStr || "") ? new ObjectId(eventIdStr!) : eventIdStr || null),
      eventTitle: event?.title || eventTitle || "Event",
      eventType,
      eventDate: event?.date || bookingDate,
      eventTime: event?.time || bookingTime,
      seats,
      seatType: seatType || "Standard",
      amount: baseAmount,
      processingFee: 0,
      totalAmount: paidAmountInNaira,
      status: "confirmed",
      bookingDate,
      bookingTime,
      paymentMethod: "paystack",
      paymentReference: reference,
      paystackData: pstack.data,
      bookingCode, // <-- add this line
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // Insert booking into the database
    const result = await db.collection("bookings").insertOne(bookingData);

    // Build createdBooking with _id and eventId
    const createdBooking = {
      ...bookingData,
      _id: result.insertedId.toString(),
      eventId: eventIdStr,
    };

    // Generate receipt HTML
    const receiptHtml = generateReceiptHtml(createdBooking);

    // Send response with receipt
    res.status(201).json({ receiptHtml });
  } else {
    res.status(405).json({ message: "Method not allowed" });
  }
}

function generateReceiptHtml(booking: any) {
  return `
    <html>
      <body>
        <table>
          <tr>
            <td width="40%" style="background:#F9FAFB; padding:12px; font-family:Arial, Helvetica, sans-serif; font-size:13px; color:#344054; font-weight:600;">Booking ID</td>
            <td style="padding:12px; font-family:Arial, Helvetica, sans-serif; font-size:13px; color:#475467;">${booking.bookingCode || booking._id}</td>
          </tr>
          <!-- Other rows here -->
        </table>
      </body>
    </html>
  `;
}

// app/receipt/[id]/page.tsx
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { pdf } from "react-pdf";
import { Booking } from "@/lib/types";

interface Props {
  booking: Booking;
}

export default function ReceiptPage({ booking }: Props) {
  const router = useRouter();
  const { id } = router.query;
  const [pdfUrl, setPdfUrl] = useState("");

  useEffect(() => {
    if (id) {
      // Fetch booking data from the database
      // Set pdfUrl with the generated PDF URL
    }
  }, [id]);

  const handleDownload = () => {
    pdf.save(`dex-view-cinema-receipt-${booking?.bookingCode || booking?._id || "receipt"}.pdf`);
  };

  return (
    <div>
      <h1>Receipt</h1>
      <p>
        <strong>Booking Code:</strong> {booking.bookingCode || booking._id}
      </p>
      {/* Other booking details here */}
      <button onClick={handleDownload}>Download Receipt</button>
    </div>
  );
}
